"""
Demonstration script for the Project Evaluator application
This script shows how to interact with the application programmatically
"""

import os
import sys
import time

# Add the project directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from models import db, Project, Evaluation

def demo_application():
    """Demonstrate the application functionality"""
    print("=" * 60)
    print("√âVALUATEUR DE PROJETS D'INVESTISSEMENT - D√âMONSTRATION")
    print("=" * 60)
    print()
    
    # Create the app
    app = create_app()
    
    with app.app_context():
        # Show existing projects
        projects = Project.query.all()
        print(f"üìä Projets dans la base de donn√©es: {len(projects)}")
        print()
        
        for i, project in enumerate(projects, 1):
            evaluation = project.latest_evaluation
            print(f"{i}. {project.titre}")
            print(f"   D√©partement: {project.pvp}")
            print(f"   Cr√©√© le: {project.created_at.strftime('%Y-%m-%d') if project.created_at else 'N/A'}")
            
            if evaluation:
                print(f"   Score final: {evaluation.score_final:.1f}/10")
                print(f"   Priorit√©: {project.priority_text}")
                print(f"   Action: {project.action_text}")
                
                # Show detailed scores
                print(f"   Scores d√©taill√©s:")
                print(f"     ‚Ä¢ Valeur Business: {evaluation.valeur_business:.1f}/10")
                print(f"     ‚Ä¢ Faisabilit√© Technique: {evaluation.faisabilite_technique:.1f}/10")
                print(f"     ‚Ä¢ Effort Requis: {evaluation.effort_requis:.1f}/10")
                print(f"     ‚Ä¢ Niveau de Risque: {evaluation.niveau_risque:.1f}/10")
                print(f"     ‚Ä¢ Urgence: {evaluation.urgence:.1f}/10")
                print(f"     ‚Ä¢ Alignement Strat√©gique: {evaluation.alignement_strategique:.1f}/10")
                
                if project.duree_estimee:
                    print(f"   Dur√©e estim√©e: {project.duree_estimee} jours ouvrables")
                
                if project.defis_techniques:
                    defis = project.defis_techniques.split('\n')
                    print(f"   D√©fis techniques identifi√©s:")
                    for defi in defis[:3]:  # Show first 3 challenges
                        if defi.strip():
                            print(f"     ‚Ä¢ {defi.strip()}")
            else:
                print("   ‚ö†Ô∏è  Non √©valu√©")
            
            print()
        
        # Show statistics
        high_priority = sum(1 for p in projects if p.priority_level == '√©lev√©e')
        medium_priority = sum(1 for p in projects if p.priority_level == 'moyenne')
        low_priority = sum(1 for p in projects if p.priority_level == 'faible')
        uneval = sum(1 for p in projects if p.priority_level == 'non-√©valu√©')
        
        print("üìà STATISTIQUES DES PRIORIT√âS:")
        print(f"   üî¥ Priorit√© √âlev√©e (‚â•7.0): {high_priority} projets")
        print(f"   üü† Priorit√© Moyenne (4.0-6.9): {medium_priority} projets")
        print(f"   üü¢ Priorit√© Faible (<4.0): {low_priority} projets")
        print(f"   ‚ö™ Non √©valu√©s: {uneval} projets")
        print()
        
        print("üöÄ POUR TESTER L'APPLICATION:")
        print("1. Assurez-vous d'avoir configur√© votre cl√© OpenAI dans .env")
        print("2. Lancez l'application avec: python app.py")
        print("3. Ouvrez votre navigateur sur: http://localhost:5000")
        print("4. Explorez les projets existants ou cr√©ez-en de nouveaux")
        print()
        
        print("üí° FONCTIONNALIT√âS √Ä TESTER:")
        print("‚Ä¢ Navigation dans la liste des projets")
        print("‚Ä¢ Visualisation des d√©tails avec graphique radar")
        print("‚Ä¢ Cr√©ation d'un nouveau projet avec am√©lioration IA")
        print("‚Ä¢ R√©√©valuation d'un projet existant")
        print("‚Ä¢ Interface enti√®rement en fran√ßais qu√©b√©cois")
        print()
        
        return True

if __name__ == "__main__":
    try:
        demo_application()
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        print("Assurez-vous que toutes les d√©pendances sont install√©es")
        print("pip install -r requirements.txt")
        sys.exit(1)
